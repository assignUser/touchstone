% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/source.R
\name{run_script}
\alias{run_script}
\title{Sources a script}
\usage{
run_script(path, ref = ref_get_or_fail("GITHUB_HEAD_REF"))
}
\arguments{
\item{path}{The script to run. It must fulfill the requirements of a
\link{touchstone_script}.}

\item{ref}{The branch that corresponds to the library that should be prepended
to the library path when the script at \code{path} is executed, see 'Why this
function?' below.}
}
\value{
The same as \code{\link[base:source]{base::source()}}, which inherits from \code{\link[base:withVisible]{base::withVisible()}}, i.e.
a list with \code{value} and \code{visible} (invisibly).
}
\description{
Basically \code{\link[base:source]{base::source()}}, but prepending the library path with a
touchstone library and running the script in a temp directory to avoid
git operations like checking out different branches to interfere with the
script execution (as running the script changes itself through git checkout).
}
\section{How to run this interactively?}{

In a GitHub Action workflow, the environment variables \code{GITHUB_BASE_REF} and
\code{GITHUB_HEAD_REF} denote the target and source branch of the pull request -
and these are default arguments in \code{\link[=benchmark_run_ref]{benchmark_run_ref()}} (and other functions
you probably want to call in your benchmarking script) to determinate the
branches to use. Hence, you must set these with \code{\link[base:Sys.setenv]{base::Sys.setenv()}}, e.g. if
you want to benchmark the local branch \code{devel} against \code{main}\preformatted{Sys.setenv(GITHUB_BASE_REF = "main", GITHUB_HEAD_REF = "devel")
}
}

\section{Why this function?}{

For isolation, \{touchstone\} does not allow the benchmarked package to be
installed in the global package library, but only in touchstone libraries, as
asserted with \code{\link[=assert_no_global_installation]{assert_no_global_installation()}}. However, this also implies
that the package is not available in the touchstone script outside of
benchmark runs (i.e. outside of \code{\link[=benchmark_run_ref]{benchmark_run_ref()}}. We sometimes still
want to call that package to prepare a benchmarking run though. To
allow this, we prepend a touchstone library location that
contains the installed benchmarked package for set-up tasks, and temporarily
remove it during benchmarking with \code{\link[=benchmark_run_ref]{benchmark_run_ref()}} so only one
touchstone library is on the library path at any time.
}

\examples{
\dontrun{
# assuming you want to compare the branch master with the branch devel
if (requireNamespace("withr")) {
  withr::with_envvar(
    c("GITHUB_BASE_REF" = "main", "GITHUB_HEAD_REF" = "devel"),
    run_script("touchstone/script.R")
  )
}
}
}
